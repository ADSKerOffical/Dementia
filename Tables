                Глава 1: Основа
В роблоксе таблицы имеют большую роль в роблоксе
Они используют как облегчение для хранения даты
Вот пример обычной таблицы:

local tabl = {}

Этот скрипт создаёт пустую таблицу ничего сложного
! Если попробовать использовать print(tabl) то отобразиться место таблицы в памяти игры
Но также можно и добавлять элементы для таблицы:

local tabl = {"A", "B", "C"}
print(tabl["A"]) -- A

В роблоксе можно использовать квадратные скобки чтобы получить информацию
Но также для таблицы можно сделать индексы (__index):

local tabl = {A = 10, B = "String", C = true}
print(tabl.A) -- 10

Тут уже есть не только индексы но и значение (value)
Значение могут быть и как [1] типо tabl[1]
! Если такого элемента нету то выдаст ошибку
! Нельзя использовать значение из других идексов в вставленной таблице (Пример: {JK = true, KL = not JK})
А также у таблицы можно получить все индексы, но только если они являются числами использовав "#":

local tabl = {[1] = "hj", [2] = true, DS = "Po"}
print(#tabl) -- 2

? Типы таблиц:
 1. Массив (array) – таблицы которые не имеют ключи или имеют только числовые индексы (например {"B", "G", "S"} или {[1] = 2, [2] = 4}). Количество элементов можно узнать с помощью "#"
 2. Словарь (dictionary) – таблицы которые имеют ключи (например {HY = 20, BD = 10}). Нельзя узнать количество элементов с помощью "#"
 3. Гибрид (hybrid) – смесь массива и словаря

Чтобы узнать все элементы и все их значения у таблицы то можно использовать цикл for:

local tabl = {1 = "HJ"}
for index, value in pairs(tabl) do
  print(index, value)
end -- 1 HJ и аналогично если будут другие параметры в таблице

Для получения элементов можно использовать: pairs, ipairs, next
! Перед next нужно ставить запятую и это будет типо: in next, table do
? Для отсутствия параметра можно использовать _

             Глава 2: Библиотека table
В роблоксе для работы с таблицами есть своя библиотека "table"
У этой библиотеки есть возможности:

table.insert(table, value): void – добавляет элемент к таблице (индекс становится цифрой)
table.clear(table): void – убирает все элементы в таблице
table.clone(table): table – клонирует таблицу
table.find(table, key): bool – возвращает true если в таблице найдет такой-то индекс
table.freeze(table): void – замораживает таблицу и делает так что её нельзя будет изменить 
? Если скопировать таблицу через table.clone и она будет заморожена то скопированная таблица не будет заморожена и таким образом можно разморозить таблицу: table = table.clone(table)
table.isfrozen(table): bool – возвращает true если таблица заморожена
table.remove(table, key): void – удаляет индекс у таблицы
table.unpack(table): string – возвращает все элементы в виде строки
table.create(repeats, index): void – создает таблицу с частью массива, выделенной для указанного количества элементов, при необходимости заполненную указанным значением

              Глава 3: Метатаблицы
Для таблиц в роблоксе существуют так называемые метатаблицы
Это как модификатор для таблиц
? Все Instance имеют метатаблицы

Для метатаблиц есть функции: getmetatable(table), setmetatable(table, metatable)

getmetatable(table) – получает все функции в метатаблице (это можно контрить)
setmetatable(table) – ставит метатаблицу для таблицы
getrawmetatable(table) (Syn) – получает все функции в метатаблицы игнорируя все защиты
setrawmetatable(table) (Syn) – ставит метатаблицу для таблицу игнорируя все защиты (кроме table.freeze)

Пример скрипта:

local service = setmetatable({}, {__index = function(self, index)
 local NewService = game:GetService(index)
   if NewService then
     self[index] = NewService
   end
  return NewService
end})

Эта переменная делает так чтобы переменная автоматически использовала game:GetService на любые индексы

Для метатаблиц есть методы:

__index – функция при использовании нового индекса
__newindex – функции при добалении в нового элемента 
__namecall – функции при использовании метода (:)
__call – тоже что и __namecall
__metatable – функция которая модифицирует метатаблицу
__add – функция которая выполняет функцию "+"
__len – функция которая выполняет функцию "#"
__gc – функция при сборке мусора

И другие

И для метатаблиц есть и другие функции: rawget, rawset, rawlen, rawequal и т.д
Эти функции игнорируют любые защиты от метатаблиц (кроме table.freeze конечно)
1. rawget(table, index) – получает значение элемента по индексу
2. rawset(table, index, value) – изменяет значение элемента по индексу
3. rawlen(table) – получает количество элементов у таблицы
4. rawequal(table1, table2) – возвращает true если таблицы идентичны
5. newproxy(bool) – разрешает добавление метатаблиц к таблицам

              Глава 4: Instances
В роблоксе у всех классов есть метатаблицы и их можно изменять (читеру)
И у них есть методы: GetChildren(), GetDescendants()
1. GetChildren() – получает все объекты к которых Parent указан на этот объект
2. GetDescendants() – получает все объекты которые как-то относятся к этому объекту

Для примера я хочу получить всех гуманоидов в игре и использую workspace:GetChildren() но это невозможно
Humanoid указан на модели, а не на workspace
Тоесть:

workspace.Model -- Model – Chidlren and Descendant
workspace.Model.Humanoid -- Model – Children and Descendant, Humanoid not Children but Descendant

Например вот скрипт который получает всех игроков:

for _, player in next, game.Players:GetPlayers() do
   print(player.Name, player.UserId)
end
